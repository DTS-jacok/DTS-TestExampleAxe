# OdinPortalLib

public function op_edit_set(in object, in value)
{
	auto rc;
	
	edit_set(object, "");
	rc=obj_type(object, value);
	
	return rc;
}
	
public function op_DataLoadFormat(in format, in key1, in key2, out value)
{
	extern LOCALDATAFILE;
	
	auto rc;
	auto datafile=getvar("result") & "\\..\\..\\" & LOCALDATAFILE;
	auto values[];
	
	value = "";
	rc=GetPrivateProfileStringA("LocalData", key1, "<DEFAULT>", values[0], 1024, datafile); 
	if(values[0] == "<DEFAULT>")
		return E_GENERAL_ERROR;
	
	rc=GetPrivateProfileStringA("LocalData", key2, "<DEFAULT>", values[1], 1024, datafile); 
	if(values[1] == "<DEFAULT>")
		return E_GENERAL_ERROR;
	
	value = sprintf(format, values[0], values[1]);
	
	return E_OK;
}


function op_WebTableGetXml(in table, out xml)
{
	auto rc;
	auto rows;
	auto cols;
	auto row, col;
	auto cell_value, cell_length;
	
	if((rc=tbl_get_rows_count(table, rows)) != E_OK)
		return rc;
	if((rc=tbl_get_cols_count(table, cols)) != E_OK)
		return rc;
	
	xml="<table>";
	
	for(row=1; row <= rows; row++)
	{
		xml = xml & "<row>";
		for(col=1; col <= cols; col++)
		{
			if((rc=web_tbl_get_cell_data(table, row, col, 0, cell_value, cell_length)) != E_OK)
			{
				report_msg("Cannot get table row " & row & ", col " & col);
				return rc;
			}
			xml = xml & "<cell>" & cell_value & "</cell>"; 
		}
		xml = xml & "</row>";
	}
	xml = xml & "</table>";
	
	return E_OK;
}
